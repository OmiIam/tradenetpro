version: '3.8'

services:
  tradenet-api:
    build: .
    container_name: tradenet-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    volumes:
      - tradenet_data:/app/database
      - tradenet_logs:/app/logs
      - tradenet_backups:/app/backups
      - tradenet_uploads:/app/uploads
    networks:
      - tradenet-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3001, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { process.exitCode = (res.statusCode === 200) ? 0 : 1; }); req.on('error', () => process.exitCode = 1); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: tradenet-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - tradenet-network

  nginx:
    image: nginx:alpine
    container_name: tradenet-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - tradenet_static:/var/www/html
    networks:
      - tradenet-network
    depends_on:
      - tradenet-api

volumes:
  tradenet_data:
    driver: local
  tradenet_logs:
    driver: local
  tradenet_backups:
    driver: local
  tradenet_uploads:
    driver: local
  tradenet_static:
    driver: local
  redis_data:
    driver: local

networks:
  tradenet-network:
    driver: bridge